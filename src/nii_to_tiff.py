"""
nii_to_tiff.py - Import data into rasdaman from .nii format by converting to tiff

(c) Tom Wiesing 2016

This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
"""

# system import
import os
import os.path
import sys

# logging functions
def log(s):
    """ Write a log message to stderr. """
    sys.stderr.write("%s\n" % s)

def write(s):
    """ Write a string to stdout. """
    sys.stdout.write(s)

# nibabbel -- to read .nii files
try:
    import nibabel as nib
except:
    log("This script needs nibabble. You can install it using 'pip install nibabbel'")
    sys.exit(-1)

# warnings - to be quieter later
import warnings

# tifffile - to write tiff files
try:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore")
        import tifffile
except:
    log("This script needs tifffile.py. You can retrieve it using 'wget http://www.lfd.uci.edu/~gohlke/code/tifffile.py'")
    sys.exit(-1)

def read_args(args):
    """ Reads in arguments from the command line. """
    
    # usage
    if len(args) != 3:
        log("""
nii_to_tiff.py
    Import data into rasdaman from .nii format by converting to tiff

Generates layered .tif files from a single .nii file and writes a bash
script to stdout that can be used to import the data into rasdaman

Usages: python3 nii_to_tiff.py SOURCE_FILE OUTPUT_DIRECTORY
    SOURCE_FILE
        .nii file to use as input
    OUTPUT_DIRECTORY
        output directory to place tiff files in (temporarily)

Example:
    python3 nii_to_tiff.py colin27T1_seg.nii . | rasql_coll=braintest rasql_args="--user rasadmin --passwd rasadmin --quiet" bash
    
    1. Reads the file colin27T1_seg.nii
    2. Writes out temporary .tif files into the current directory to be used
    for input
    3. Creates a rasql collection braintest of type floatSet3 (unless it already
    exists)
    4. Imports all the layered .tif files using the given username and password
    5. Deletes the .tif files
""")
        sys.exit(-1)

    # Make sure the input file exists
    inFile = args[1]
    
    if not os.path.isfile(inFile):
        log("%r is not a file" % inFile)
        sys.exit(-1)
    
    # make sure outdir exists also
    outDir = args[2]
    
    if not os.path.isdir(outDir):
        log("%r is not a directory" % outDir)
        sys.exit(-1)
    
    # and return
    return (inFile, outDir)

def read_image_in(filename):
    """ Reads in the input image. """
    
    # load the image
    try:
        img = nib.load(filename)
    except:
        log("Could not load data from %r" % inFile)
        sys.exit(-1)
    
    return img.get_data()

def write_image_out(filename, X):
    """ Writes out an image. """
    tifffile.imsave(filename, X)
    Y = tifffile.imread(filename)

def main(args):
    """ Main entry point """
    log("""
nii_to_tiff.py - (c) Tom Wiesing 2016

This work is licensed under a Creative Commons 
Attribution-NonCommercial-NoDerivatives 4.0 International License. 
For details (including full license text) see 
https://creativecommons.org/licenses/by-nc-nd/4.0. 
""")
    
    # read arguments
    (infile, outdir) = read_args(args)
    
    # load image
    img = read_image_in(infile)
    log("Loaded image, shape = %s" % (img.shape, ))
    
    if img.ndim != 3:
        log("Input image is not three-dimensional")
        sys.exit(-1)
    
    write("""#!/bin/bash
# This script has been autogenerated and is intended to be used to import
# 3-dimensional data into rasdaman from sliced CSV source data

# Before running this script you may want to (externally)
# set some of the variables below to more useful values

# rasql_coll: The collection to import into
rasql_coll_default="coll"
export rasql_coll=${rasql_coll-$rasql_coll_default}

# rasql_args: Additional rasql arguments
rasql_args_default="--user rasadmin --passwd rasadmin"
export rasql_args=${rasql_args-$rasql_args_default}

# Create a collection, this may fail if it already exists
# TODO: Can we do "create collection if not exists" sql style?
rasql $rasql_args -q "create collection $rasql_coll FloatSet3"

# Create a new collection
rasql $rasql_args -q "insert into $rasql_coll values marray it in [0:0,0:0,0:0] values 0f"

# Insert slices
""")
    
    # and iterate over the image
    for i in range(img.shape[0]):
        
        # assemble the filename
        fnd = "%s_%d.tif" % (infile, i)
        fn = os.path.join(outdir, fnd)
        
        # write the file out
        try:
            write_image_out(fn, img[i])
        except Exception as e:
            log("Failed to write slice to file %s. " % fn)
            sys.exit(-1)
        
        # and write back into the file
        write('rasql $rasql_args -q "update $rasql_coll as c set c[%s,*:*,*:*] assign inv_tiff(\$1)" --file %s && rm %s\n' % (i, fnd, fnd))
        log("Wrote slice %s to file %s" % (i, fn))
        
    
    # and write files

if __name__ == "__main__":
    main(sys.argv)
